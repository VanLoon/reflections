What happens when you initialize a repository? Why do you need to do it?
  When I initialize a repository, Git makes a .git repository (or 'folder') 
  in the directory (or 'folder') I initialized the repository in.
  I need to initialize a repository in order to have changes I make in the 
  directory tracked by Git, so that I can make use of Git's version-control 
  tools.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area is different from the working directory because it represents 
  what is going to be committed in the next commit, whereas the working directory 
  represents all of the files, even ones that aren't part of the 'next logical change'.
  The staging area is different from the repository because the repository 
  because it only contains data about the current commit, whereas the repository
  contains information about all commits logged.

How can you use the staging area to make sure you have one commit per logical change?
  I can use the staging area to know what files have been changed, and how, 
  before I make the next commit. 
  
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  Branches would be helpful when multiple people work on a large project,
  because they can be merged into one later. Branches would also be helpful 
  in trying different solutions to one problem, to compare for efficiency and 
  effectiveness.
  
How do the diagrams help you visualize the branch structure?
  The diagrams show all the branches in the repository, all the way back. 
  They also help to visualize reachability and detached HEAD.
  
What is the result of merging two branches together? Why do we represent it in 
the diagram the way we do?
  The result of merging two branches together is that the different versions of 
  the same files are combined by an algorithm. The log of their commit histories 
  is interwoven based on the time they were committed. We represent it in 
  the diagram the way we do because it's easy to think of the different versions
  of the same files as splitting and going down different paths for a while, before 
  coming back together.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
  Pros: convenience, consistency
  Cons: occasional conflicts that have to be sorted out, possibility of not going the 
    right way

Describe the differences between forks, clones, and branches. When would you use one 
instead of the other?
  A fork is a copy of someone's GitHub repository. It is a remote repository on GitHub.
  A clone is a copy of a GitHub repository. It is a local repository on someone's computer.
  A branch is a point of deviation between two versions of a Git repository. It can be
  used for testing and tweaking experimental features without breaking the 'official version'.

